# wordpress service 이다.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ing
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    #alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: instance
    #alb.ingress.kubernetes.io/target-type: ip
spec:
  defaultBackend:
    service:
      name: wordpress
      port:
        number: 80
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: wordpress # wordpress nodeport service 에 연결
                port:
                  number: 80
---
# wordpress svc np
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress # 이름은 wordpress 로 지정
spec:
  type: NodePort # LoadBanlancer -> 이렇게 되면 클래식 loadbalancer 가 만들어진다.
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress # app: wordpress, tier: frontend label을 가진 resouce만을 대상으로 한다.
    tier: frontend
---
apiVersion: v1
kind: PersistentVolumeClaim # PVC 를 만든다.
metadata:
  name: wp-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: wordpress-mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  replicas: 5 
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
        - image: wordpress:4.8-apache
          name: wordpress
          envFrom:
            - configMapRef:
                name: wordpress-config
          env:
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
          ports:
            - containerPort: 80
              name: wordpress
          volumeMounts:
            - name: wordpress-persistent-storage
              mountPath: /var/www/html
          readinessProbe:
            httpGet:
              path: /wp-login.php
              port: wordpress
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /wp-admin
              port: wordpress
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 10
          resources:
            limits:
              cpu: "0.5"
              memory: 500Mi
            requests:
              cpu: "0.5"
              memory: 500Mi
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wp-pv-claim
